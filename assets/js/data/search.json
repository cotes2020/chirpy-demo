[ { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 00:34:00 +0800", "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons. Generate the favicon Prepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file. In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon. Download &amp; Replace Download the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifest And then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one. The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete. The next time you build the site, the favicon will be replaced with a customized edition. " }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 20:55:00 +0800", "content": "Get started with Chirpy basics in this comprehensive overview. You will learn how to install, configure, and use your first Chirpy-based website, as well as deploy it to a web server." }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 14:10:00 +0800", "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set. Naming and Path Create a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this. Front Matter Basically, you need to fill the Front Matter as below at the top of the post: --- title: TITLE date: YYYY-MM-DD HH:MM:SS +/-TTTT categories: [TOP_CATEGORY, SUB_CATEGORY] tags: [TAG] # TAG names should always be lowercase --- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block. Timezone of Date To accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800. Categories and Tags The categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance: --- categories: [Animal, Insect] tags: [bee] --- Author Information The author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows: Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one). &lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt; And then use author to specify a single entry or authors to specify multiple entries: --- author: &lt;author_id&gt; # for single entry # or authors: [&lt;author1_id&gt;, &lt;author2_id&gt;] # for multiple entries --- Having said that, the key author can also identify multiple entries. The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO. Post Description By default, the first words of the post are used to display on the home page for a list of posts, in the Further Reading section, and in the XML of the RSS feed. If you don’t want to display the auto-generated description for the post, you can customize it using the description field in the Front Matter as follows: --- description: Short summary of the post. --- Additionally, the description text will also be displayed under the post title on the post’s page. Table of Contents By default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter: --- toc: false --- Comments The global setting for comments is defined by the comments.provider option in the _config.yml file. Once a comment system is selected for this variable, comments will be enabled for all posts. If you want to close the comment for a specific post, add the following to the Front Matter of the post: --- comments: false --- Media We refer to images, audio and video as media resources in Chirpy. URL Prefix From time to time we have to define duplicate URL prefixes for multiple resources in a post, which is a boring task that you can avoid by setting two parameters. If you are using a CDN to host media files, you can specify the cdn in _config.yml. The URLs of media resources for site avatar and posts are then prefixed with the CDN domain name. cdn: https://cdn.com To specify the resource path prefix for the current post/page range, set media_subpath in the front matter of the post: --- media_subpath: /path/to/media/ --- The option site.cdn and page.media_subpath can be used individually or in combination to flexibly compose the final resource URL: [site.cdn/][page.media_subpath/]file.ext Images Caption Add italics to the next line of an image, then it will become the caption and appear at the bottom of the image: ![img-description](/path/to/image) _Image Caption_ Size To prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image. ![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" } For an SVG, you have to at least specify its width, otherwise it won’t be rendered. Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above: ![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" } Position By default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } Dark/Light mode You can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light): ![Light mode only](/path/to/light-mode.png){: .light } ![Dark mode only](/path/to/dark-mode.png){: .dark } Shadow The screenshots of the program window can be considered to show the shadow effect: ![Desktop View](/assets/img/sample/mockup.png){: .shadow } Preview Image If you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped. Knowing these prerequisites, you can start setting the image’s attribute: --- image: path: /path/to/image alt: image alternative text --- Note that the media_subpath can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name. For simple use, you can also just use image to define the path. --- image: /path/to/image --- LQIP For preview images: --- image: lqip: /path/to/lqip-file # or base64 URI --- You can observe LQIP in the preview image of post \"Text and Typography\". For normal images: ![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" } Video Social Media Platform You can embed videos from social media platforms with the following syntax: {% include embed/{Platform}.html id='{ID}' %} Where Platform is the lowercase of the platform name, and ID is the video ID. The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms. Video URL Platform ID https://www.youtube.com/watch?v=H-B46URT4mg youtube H-B46URT4mg https://www.twitch.tv/videos/1634779211 twitch 1634779211 https://www.bilibili.com/video/BV1Q44y1B7Wf bilibili BV1Q44y1B7Wf Video Files If you want to embed a video file directly, use the following syntax: {% include embed/video.html src='{URL}' %} Where URL is a URL to a video file e.g. /path/to/sample/video.mp4. You can also specify additional attributes for the embedded video file. Here is a full list of attributes allowed. poster='/path/to/poster.png' — poster image for a video that is shown while video is downloading title='Text' — title for a video that appears below the video and looks same as for images autoplay=true — video automatically begins to play back as soon as it can loop=true — automatically seek back to the start upon reaching the end of the video muted=true — audio will be initially silenced types — specify the extensions of additional video formats separated by |. Ensure these files exist in the same directory as your primary video file. Consider an example using all of the above: {% include embed/video.html src='/path/to/video.mp4' types='ogg|mov' poster='poster.png' title='Demo video' autoplay=true loop=true muted=true %} Audios If you want to embed an audio file directly, use the following syntax: {% include embed/audio.html src='{URL}' %} Where URL is a URL to an audio file e.g. /path/to/audio.mp3. You can also specify additional attributes for the embedded audio file. Here is a full list of attributes allowed. title='Text' — title for an audio that appears below the audio and looks same as for images types — specify the extensions of additional audio formats separated by |. Ensure these files exist in the same directory as your primary audio file. Consider an example using all of the above: {% include embed/audio.html src='/path/to/audio.mp3' types='ogg|wav|aac' title='Demo audio' %} Pinned Posts You can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by: --- pin: true --- Prompts There are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows: &gt; Example line for prompt. {: .prompt-info } Syntax Inline Code `inline code part` Filepath Highlight `/path/to/a/file.extend`{: .filepath} Code Block Markdown symbols ``` can easily create a code block as follows: ``` This is a plaintext code snippet. ``` Specifying Language Using ```{language} you will get a code block with syntax highlight: ```yaml key: value ``` The Jekyll tag {% highlight %} is not compatible with this theme. Line Number By default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it: ```shell echo 'No more line numbers!' ``` {: .nolineno } Specifying the Filename You may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this: ```shell # content ``` {: file=\"path/to/file\" } Liquid Codes If you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}: {% raw %} ```liquid {% if product.title contains 'Pack' %} This product's title contains the word Pack. {% endif %} ``` {% endraw %} Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block. Mathematics We use MathJax to generate mathematics. For website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by: --- math: true --- After enabling the mathematical feature, you can add math equations with the following syntax: Block math should be added with $$ math $$ with mandatory blank lines before and after $$ Inserting equation numbering should be added with $$\\begin{equation} math \\end{equation}$$ Referencing equation numbering should be done with \\label{eq:label_name} in the equation block and \\eqref{eq:label_name} inline with text (see example below) Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$ Inline math (in lists) should be added with \\$$ math $$ &lt;!-- Block math, keep all blank lines --&gt; $$ LaTeX_math_expression $$ &lt;!-- Equation numbering, keep all blank lines --&gt; $$ \\begin{equation} LaTeX_math_expression \\label{eq:label_name} \\end{equation} $$ Can be referenced as \\eqref{eq:label_name}. &lt;!-- Inline math in lines, NO blank lines --&gt; \"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\" &lt;!-- Inline math in lists, escape the first `$` --&gt; 1. \\$$ LaTeX_math_expression $$ 2. \\$$ LaTeX_math_expression $$ 3. \\$$ LaTeX_math_expression $$ Starting with v7.0.0, configuration options for MathJax have been moved to file assets/js/data/mathjax.js, and you can change the options as needed, such as adding extensions. If you are building the site via chirpy-starter, copy that file from the gem installation directory (check with command bundle info --path jekyll-theme-chirpy) to the same directory in your repository. Mermaid Mermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block: --- mermaid: true --- Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```. Learn More For more knowledge about Jekyll posts, visit the Jekyll Docs: Posts. " }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "content": "Examples of text, typography, math equations, diagrams, flowcharts, pictures, videos, and more." } ]
